// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Table Schemas

enum Status {
  Active
  Inactive
}

model Module {
  id          Int          @id @default(autoincrement())
  name        String
  status      Status
  path        String? // Optional path field
  createdDate DateTime     @default(now())
  roles       ModuleRole[]
  icon        String? // Optional Icon Name

  // Hierarchical self-relation
  parentModuleId Int?
  parentModule   Module?  @relation("ModuleHierarchy", fields: [parentModuleId], references: [id], onDelete: Cascade)
  subModules     Module[] @relation("ModuleHierarchy")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  status      String
  createdDate DateTime     @default(now())
  modules     ModuleRole[]
  User        User[]
}

model ModuleRole {
  id       Int    @id @default(autoincrement())
  module   Module @relation(fields: [moduleId], references: [id])
  moduleId Int
  role     Role   @relation(fields: [roleId], references: [id])
  roleId   Int

  @@unique([moduleId, roleId])
}

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  email     String  @unique
  password  String
  userToken String?
  status      Status

  roleId Int?
  role   Role? @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
}
